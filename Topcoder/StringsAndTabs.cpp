#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <string.h>
using namespace std;

vector<string>ans;
string pos;
const int N = 55;
int col[N];
vector<int>sa, sb;
int n;
int dp[N][2505];
int curcol;
bool bad[N];
//vector<pair<int, int> >a;
class StringsAndTabs {
public:

	/*

	int solve1(int idx){
	int value= col[idx];
	int rem=0;
	vector<pair<char,int> >ret;
	for(int i=a.size()-1;i>=0;i--){
	if( value > a[i].first +35){
	ret.push_back(make_pair(pos[35],a[i].second));
	value -= a[i].first +35;
	}else if( value >= a[i].first ){
	int dif = value - a[i].first;
	value=0;
	ret.push_back(make_pair(pos[dif],a[i].second));
	break;
	}else {
	continue;
	}
	}
	if(value > 0){
	for(int i=0;i<(int)sb.size();i++){
	ans[i][idx]='x';
	}
	}else{
	for(int i=0;i<(int)ret.size();i++){
	ans[ret[i].second][idx]=ret[i].first;
	}

	}
	}
	*/
	int solve1(int idx, int value) {
		if (idx >= sb.size()) {
			return value != 0 ? -1e9 : 0;
		}
		int  &ret = dp[idx][value];
		if (ret != -1) {
			return ret;
		}
		for (int i = 0; i<=35; i++) {
			if (value < sb[idx]+i)break;
			if (ret < solve1(idx + 1, value - (sb[idx] + i)) + 1){
				ret = solve1(idx + 1, value - (sb[idx] + i)) + 1;
              }
		}
		if (ret < solve1(idx + 1, value)) {
			ret = solve1(idx + 1, value);
		}
		return ret;

	}

	void Out(int idx, int value) {
		if (idx >= (int)sb.size()) {
			return;
		}
		int mainch = solve1(idx, value);
		int ch2 = solve1(idx + 1, value);
		if (mainch == ch2) {
			Out(idx + 1, value);
		}
		else {
			for (int i = 0; i<=35; i++) {
				if (value < sb[idx] + i)break;
				int x = solve1(idx + 1, value - (sb[idx]+i)) + 1;
				if (mainch == x) {
					ans[idx][curcol] = pos[i];
					Out(idx + 1, value - (sb[idx] + i));
					break;
				}
			}
		}
	}
	void pput(int c,int f ) {
		for (int j = 0; j<(int)sb.size(); j++) {
			ans[j][c] = ((f==0)?'-':'x');
		}
	}
	void solve() {
		int x=0;
		for (int i = 0; i<n; i++) {
			curcol = i;
			if (bad[i]) {
				pput(i, 0);
				x = -5;
			}else if (col[i] < 0) {
				pput(i,1);
				x = -5;
			}else { 
				x = solve1(0, col[i]); 
			}
			if (!bad[i]&&x<0) {
				pput(i,1);
			}else if(x>0&&!bad[i]){
				Out(0, col[i]);
			}
			memset(dp, -1, sizeof(dp));
		}

	}
	vector <string> transformTab(vector <string> tab, vector <int> stringsA, vector <int>stringsB, int d) {
		sa = stringsA;
		sb = stringsB;
		n = (int)tab[0].size();
		pos = "0123456789";
		memset(bad, 1, sizeof(bad));
		memset(col, 0, sizeof(col));
		ans.clear();
		for (char i = 'A'; i <= 'Z'; i++) {
			pos += i;
		}
		for (int i = 0; i<(int)tab.size(); i++) {
			for (int j = 0; j < (int)tab[i].size(); j++) {
				if (tab[i][j] != '-'){
				   col[j] += ((int)pos.find(tab[i][j]) + sa[i]);
				   bad[j] = 0;
			     }
				if (i + 1 == (int)tab.size() && !bad[j]) { col[j] += d;}
			}
		}
		
		for (int i = 0; i<(int)sb.size(); i++) {
			ans.push_back(tab[0]);
	//		a.push_back(make_pair(sb[i], i));
		}
		//sort(a.begin(), a.end());
		solve();
		return ans;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, vector <string> p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	StringsAndTabs *obj;
	vector <string> answer;
	obj = new StringsAndTabs();
	clock_t startTime = clock();
	answer = obj->transformTab(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p4[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		}
		else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	vector <string> p4;

	{
		// ----- test 0 -----
		string t0[] = { "-----------------","-------------0-1-","---------0-2-----","---0-2-3---------","-3---------------","-----------------" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 28,23,19,14,9,4 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 9 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0;
		string t4[] = { "-3-5-7-8-A-C-E-F-" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "-4457754-20024422-4457754-20024200-" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 28,23,19,14,9,4 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 12;
		string t4[] = { "-----------------------------------","-----------------------------------","----00---------------00------------","-223--32-0--02200-223--32-0--020---","----------33---------------33---33-","-----------------------------------" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "-----------------------------------","-----------------------------------","----00---------------00------------","-223--32-0--02200-223--32-0--020---","----------33---------------33---33-","-----------------------------------" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 28,23,19,14,9,4 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 33,28,24,31 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 12;
		string t4[] = { "-----------------------------------","-001--10-----00---001--10-----0----","---------2002--22---------2002-200-","----00---------------00------------" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "-----0------2-2222--0-------0-","----0------2---222---5-----55-","---0------2-----22----9---999-","--0------2-------2-----E-EEEE-","-0------2---------------------","0------2----------------------" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 28,23,19,14,9,4 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 33,28,28 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 12;
		string t4[] = { "xxx-27-xx-049-999x--7777-777x-","xxx----xx-------5x---------Cx-","xxx3---xx0-----99x--------CCx-" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "012345---------","---------UVWXYZ" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { -2,2 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 0 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0;
		string t4[] = { "xx0123---WXYZxx" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = { "0220----02--","75--75----57","------B9B9B9","--242424----" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 33,28,24,31 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 33,28,28 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0;
		string t4[] = { "222222222222","------------","555555555555" };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
