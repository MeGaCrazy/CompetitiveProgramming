/*
*      Idea : Try from each point as a starting point and then we can drop in next platfrom under us if 
*           Let's See some Math Equations vertical distance = (g*t^2)/2 :
*                                         that mean when move othersides and simplifier t=Sqrt((vertical_distance)*2)/g)
*                                         then we need to check we don't move with speed more than v 
*                                         Speed = distance / time  
*           Happy Solving :)
*
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=55;
int x[N],y[N],c[N],dp[N],n,G,V;

class PlatformJumper {
public:
       
        int solve(int i){
           int &ret=dp[i];
           if(dp[i]!=-1)return dp[i];
           ret=0;
           for(int j=0;j<n;j++){
             if(y[j]<y[i]){
                 double t=sqrt((y[i]-y[j])*2/G);
                 double vcur=(double)abs(x[i]-x[j])/t;
                 if(vcur-V<0.00001) ret=max(ret,solve(j));
               }
           }
           return ret=ret+c[i];
        }

	int maxCoins(vector <string> platforms, int v, int g) {
	    memset(dp,-1,sizeof(dp));
	    n=platforms.size();V=v,G=g;
	    for(int i=0;i<n;i++){
	       sscanf(platforms[i].c_str(),"%d %d %d",x+i,y+i,c+i);
	    }
	    int ans=0;
	    for(int i=0;i<n;i++){
	       ans=max(ans,solve(i));
	    }
	    return ans;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	PlatformJumper *obj;
	int answer;
	obj = new PlatformJumper();
	clock_t startTime = clock();
	answer = obj->maxCoins(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"3 10 7","5 15 7","8 9 12"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 10;
	p3 = 14;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0 0 1","2 4 1","4 0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 0 1","5000 5000 10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 87;
	p3 = 10;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
