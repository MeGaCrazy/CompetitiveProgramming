/*
*    Idea : The problem divide in two parts preprocessing and dp 
*           1- preprocessing
*                 a- u need to Find Shortest way to change x to y ( doable with floyd) 
*                 b- and Shortest way to add x and also remove x
*                    This doable with try for x try to add y and change it to x,and For Remove Try to Change x to y and Remove y
*           2- dp now the recurrence Really Easy Just usual Nested Range But There is alot of choices
*               a- Remove j or Remove i
*               b- Change i and j to k(a..z)
*               c- Change i to k and add k
*               d- add k and change j to k
*
*         Corner Case : Take Care of OverFlow so Try to make all Arrays Long Long 
*
*         Happy Solving :)
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=27;
long long  Remove[N],Change[N][N],Add[N];
long long  dp[55][55];
string s;

class PalindromizationDiv1 {
public:
       void modify(const vector<string>&v){
              for(int i=0;i<(int)v.size();i++){
                 istringstream in(v[i]);
                 int cost;
                 string s;
                 char c,c2;
                 in>>s;
                 in>>c;
                 if(s=="erase"){
                   in>>cost;
                   Remove[c-'a']=cost;
                 }else if(s=="add"){
                   in>>cost;
                  Add[c-'a']=cost;
                 }else if(s=="change"){
                   in>>c2;
                   in>>cost;
                   Change[c-'a'][c2-'a']=cost;
                 }
              }
        }
        long long solve(int i,int j){
            long long  &ret=dp[i][j];
            if(ret!=-1)return ret;
            ret=(int)1e18;
            if(i>=j)return ret=0;
        //    if(s[i]==s[j]){
         //     return ret=solve(i+1,j-1);
          //  }
            ret=min(ret,solve(i+1,j)+Remove[s[i]-'a']);
            ret=min(ret,solve(i,j-1)+Remove[s[j]-'a']);

            for(int k=0;k<26;k++){
               ret=min(ret,solve(i+1,j-1)+Change[s[i]-'a'][k]+Change[s[j]-'a'][k]);
               ret=min(ret,solve(i+1,j)+Change[s[i]-'a'][k]+Add[k]);
               ret=min(ret,solve(i,j-1)+Change[s[j]-'a'][k]+Add[k]);
            }
            return ret;
        }

      	int getMinimumCost(string word, vector <string> op) {
      	     memset(dp,-1,sizeof(dp));
      	      s=word;
              for(int k=0;k<N;k++){
      	        for(int i=0;i<N;i++){
      	          for(int j=0;j<N;j++){
      	            if(i==j)Change[i][j]=0;
      	            else Change[i][j]=(int)1e14;
      	          }
      	        }
      	        Add[k]=(int)1e14;
      	        Remove[k]=(int)1e14;
      	     }
      	     modify(op);
      	     for(int k=0;k<N;k++){       
      	        for(int i=0;i<N;i++){
      	          for(int j=0;j<N;j++){
      	            Change[i][j]=min(Change[i][j],Change[i][k]+Change[k][j]);
      	          }
      	        }
      	     }
      	     bool ok=1;
      	     while(ok){
      	        ok=0;
      	        for(int i=0;i<N;i++){
      	           for(int j=0;j<N;j++){
      	               if(Remove[i] > Change[i][j]+Remove[j]){
      	                  Remove[i]=Change[i][j]+Remove[j];
      	                  ok=1;
      	               }
      	           }
      	        }
      	     }
      	    ok=1;
      	    while(ok){
      	       ok=0;
      	       for(int i=0;i<N;i++){
      	          for(int j=0;j<N;j++){
      	             if(Add[j] > Change[i][j]+Add[i]){
      	               Add[j]=Change[i][j]+Add[i];
      	               ok=1;
      	             }
      	          }
      	       }
      	    }
      	    long long ans=solve(0,word.size()-1);
      	    
      	    return ans>=(int)1e14?-1:ans;


	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PalindromizationDiv1 *obj;
	int answer;
	obj = new PalindromizationDiv1();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "racecar";
	p1.clear() /*{}*/;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "topcoder";
	string t1[] = {"erase t 1","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "topcoder";
	string t1[] = {"erase t 10","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "caaaaaab";
	string t1[] = {"change b a 100000","change c a 100000","change c d 50000","change b e 50000","erase d 50000","erase e 49999"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 199999;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "moon";
	string t1[] = {"erase o 5","add u 7","change d p 3","change m s 12","change n d 6","change s l 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
