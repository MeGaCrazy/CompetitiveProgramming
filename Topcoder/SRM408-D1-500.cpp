/*
*  target : put max pieces such that his brother lose if u put more than 2e9 he must win..
*  sol    : u can see it as tree to make him lose put leave with only 1 piece 
*           here we use likely the same obervation of first visit and last visit of SCC
*           and the parent of leave is getting as (1<<lastvisit-ftvisit) so it's the max number of pieces he can put..
*
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
const int N=55;
int ftdepth[N],ltdepth[N],n;
vector<string>G;
class CandyGame {
public:
       void dfs(int v,int d){
            ftdepth[v]=ltdepth[v]=d;
            for(int i=0;i<n;i++){
               if(v==i||ftdepth[i]!=-1)continue;
               if(G[v][i]=='Y')
               dfs(i,d+1);
               ltdepth[v]=max(ltdepth[v],ltdepth[i]);

            }
       
       }

	int maximumCandy(vector <string> graph, int target) {
            n=graph.size();
            G=graph;
	    memset(ftdepth,-1,sizeof(ftdepth));
	    dfs(target,0);
	    int ret=0;
	    for(int i=0;i<n;i++){
	      if(i==target)continue;
	      if(ftdepth[i]==-1)return -1;
	      ret+=(1ll<<(ltdepth[i]-ftdepth[i]));
	    }

	    return (ret>2000000000)?-1:ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	CandyGame *obj;
	int answer;
	obj = new CandyGame();
	clock_t startTime = clock();
	answer = obj->maximumCandy(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"NYN","YNY","NYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYN","YNY","NYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NYYY","YNNN","YNNN","YNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NYYY","YNNN","YNNN","YNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NYNNNYN","YNYNYNN","NYNYNNN","NNYNNNN","NYNNNNN","YNNNNNY","NNNNNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 11;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"NYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","YNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NYNYNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNYNYNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNYNYNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNYNYNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNYNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNYNYNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNYNYNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNYNYNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNYNYNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNYNYNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNYNYNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNYNYNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNYNYNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNYNYNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNYNYNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNYNYNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNYNYNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNYNYNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNYNYNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNYNYNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNYNYNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNYNYNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNYNYNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNYNYNNN","NNNNNNNNNNNNNNNNNNNN"
			"NNNNNNNYNYNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNYNYN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNY","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
