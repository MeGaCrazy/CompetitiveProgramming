/*
*        Idea : Just Sort input Ranges and then there is 2 condition i stand in point that is
*                in (element i range) so i must take minimum packets to finish this. 
*                or i'm was less than the (elemen i range) so i jumb to  first of it range and try to fill him
*                With minimum packet ;
*                Take Care : in SomeCase the summation will overflow integer :)
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;    
class ProgrammingDevice {
public:
//        map<pair<int,int>,int>mp;
       /* int solve(int i,int last){
           if(mp.count(make_pair(i,last))!=0){
              return mp[make_pair(i,last)];
           }
           if(i==n){
             return mp[make_pair(i,last)]=0;
           }
           int ret=0;
           if(last >=lt[i]){
            ret=solve(i+1,last);
           }
           if(last >= ft[i]&&last<lt[i]){
              int add=((long long )lt[i]-last+(data-1))/data;              
           //   cerr<<"hoi: "<<add<<" => "<< ft[i]<<" => "<<lt[i]<<" "<<last<<endl;
              ret=solve(i+1,last+(data*add))+add;
           }
           else if(last<ft[i]){
               int add=(lt[i]-ft[i]+(data-1))/data;
            //  cerr<<add<<" => "<< ft[i]<<" => "<<lt[i]<<endl;
               ret=solve(i+1,ft[i]+(add*data))+add;
           }
           return mp[make_pair(i,last)]=ret;
        }
        */

	int minPackets(vector <int> offset, vector <int> size, int maxData) {
	      int n=offset.size();
	      int data=maxData;
	      vector<pair<int,int> >v;
	      for(int i=0;i<offset.size();i++){
	         v.push_back(make_pair(offset[i],size[i]));
	      }
	      sort(v.begin(),v.end());
	      int last=v[0].first,ans=0;
	      for(int i=0;i<n;i++){
	         int ft=v[i].first,lt=v[i].first+v[i].second;
	         if(last>=lt){
	            continue;
	         }
	         if(last >=ft &&last<lt){
	              int add=((long long )lt-last+(data-1))/data;
	              ans+=add;
	              last+=(data*add);
	         }else if(last < ft){
	            int add=(lt-ft+(data-1))/data;
	            ans+=add;
	            last=ft+(add*data);
	         }
	      }
	      return ans;
	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	ProgrammingDevice *obj;
	int answer;
	obj = new ProgrammingDevice();
	clock_t startTime = clock();
	answer = obj->minPackets(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {0,10,20,30};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,5,3,11};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,10,20,30};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,2,3,11};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {15,95};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 100;
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {77,7777,777};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {700,70000,7000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 77700;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
//	{{0, 1000000000}, {1000000000, 1000000000}, 1500000000}
	int t0[] = {0,1000000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1000000000,1000000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1500000000;
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,1000000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1000000000,1000000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 2000000000;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
