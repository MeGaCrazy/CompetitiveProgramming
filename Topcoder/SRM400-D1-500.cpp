/*
*    idea : u need to keep track of 5 thing (l,r) ((st,en) of reversed array)  (is now rev or not) 
*          But if u see pararmeter en is infarried i other world can be generated from other parameters
*          So the state now is [l][r][st][rev] 
*          and then if rev or not then we compare with the reverse order then there to choice reduce The String  from left or from right  
*          The Third choice is Rev this interval :)
*          Summary: Try to reduce String from right or left Or reverse the String :)
*
*
*             
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int inf=(int)1e7+5,N=55;
int dp[N][N][N][2];
string s,g;

class ReversalChain {
public:
       int solve(int l,int r,int st,int rev){
           int en=(r-l)+st;
           int &ret=dp[l][r][st][rev];
           if(ret!=-1)return ret;
           if(l==r){
               if(g[st]==s[l])return ret=0;
               else return ret=inf;
           }
           ret=inf;
           if(rev){
              if(s[l]==g[en]){
                 ret=min(ret,solve(l+1,r,st,rev));
              }
              if(s[r]==g[st]){
                ret=min(ret,solve(l,r-1,st+1,rev));
              }
           }else{
              if(s[l]==g[st]){
                 ret=min(ret,solve(l+1,r,st+1,rev));
              }
              if(s[r]==g[en]){
                 ret=min(ret,solve(l,r-1,st,rev));
              }
           }
           ret=min(ret,solve(l,r,st,1-rev)+1);
           return ret;
       }
	int minReversal(string init, string goal) {
	   s=init;
	   g=goal;
	   memset(dp,-1,sizeof(dp));
	   int ans=solve(0,init.size()-1,0,0);
	   return ans >= inf ? -1 : ans;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ReversalChain *obj;
	int answer;
	obj = new ReversalChain();
	clock_t startTime = clock();
	answer = obj->minReversal(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "1100";
	p1 = "0110";
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "111000";
	p1 = "101010";
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "0";
	p1 = "1";
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "10101";
	p1 = "10101";
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "111000111000";
	p1 = "001100110011";
	p2 = 4;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
