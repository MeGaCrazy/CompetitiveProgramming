#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=55;
int dp[N][N][27][2];
pair<char,pair<char,char> >arr[N];
int dis[N];
int n;
string s;
class PalindromizationDiv1 {
public:
       void modify(const vector<string>&op){
	  for(int i=0;i<(int)op.size();i++){
	      string s=op[i];
	      istringstream in(s);
	      string tmp;
	      char a,b;
	      int cost;
	      in>>tmp;
	      if(tmp=="add"){
	       in>>a;
	       in>>cost ;
	       arr[i]=make_pair('a',make_pair(a,'z'));
	       dis[i]=cost;
	      }else if(tmp=="erase"){
	       in>>a;
	       in>>cost;
	       arr[i]=make_pair('e',make_pair(a,'z'));
	       dis[i]=cost;
	      }else{
	        in>>a;
	        in>>b;
	        in>>cost;
	        arr[i]=make_pair('c',make_pair(a,b));
	        dis[i]=cost;
	      }
	  }	
       }
        int solve(int i,int j,int nw,int f){
            int &ret=dp[i][j][nw][f];
            if(ret!=-1)return ret;
            if(i>=j){
              return ret=0;
            }
            ret=(int)1e9;
            char left=s[i],right=s[j];
            if(nw!=26){
                  if(f==0){
                   left=(char)(nw+'a');
                  }else if(f==1){
                   right=(char)(nw+'a');
                  }
               }
            if(left==right){
           //  cerr<<s[i]<<" "<<s[j]<<endl;
             return ret=min(ret,solve(i+1,j-1,26,0));
            }
            for(int k=0;k<n;k++){
               char type=arr[k].first;
               int cost=dis[k];
               char a=arr[k].second.first;
               char b=arr[k].second.second;
               if(type=='a'){
                  if(right==a){
                    ret=min(ret,solve(i,j-1,26,0)+cost);
                  }
                  else if(left==a){
                   ret=min(ret,solve(i+1,j,26,0)+cost);
                  }
               }else if(type=='e'){
                  if(left==a){
                   ret=min(ret,solve(i+1,j,26,0)+cost);
                  }
                  else if(right==a){
                   ret=min(ret,solve(i,j-1,26,0)+cost);
                  }
               }else if(type=='c'){
                  if((left==a&&right==b)||(right==a&&left==b)){
                     ret=min(ret,solve(i+1,j-1,26,0)+cost);
                  }else if(nw==26&&left==a&&right!=b){
                    // cerr<<left<<" "<<right<<endl;
                     ret=min(ret,solve(i,j,b-'a',0)+cost);
                  }
                  else if(nw==26&&right==a&&left!=b){
                     //cerr<<left<<" "<<right<<endl;
                     ret=min(ret,solve(i,j,b-'a',1)+cost); 
                  }
               }
            }
           return ret; 
        }


	int getMinimumCost(string word, vector <string> op) {
	     n=op.size();
	     modify(op);
	     s=word;
	     memset(dp,-1,sizeof(dp));
	     int ans=solve(0,word.size()-1,26,0);
	     return (ans>=(int)1e9)?-1:ans;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PalindromizationDiv1 *obj;
	int answer;
	obj = new PalindromizationDiv1();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "racecar";
	p1.clear() /*{}*/;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "topcoder";
	string t1[] = {"erase t 1","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "topcoder";
	string t1[] = {"erase t 10","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "caaaaaab";
	string t1[] = {"change b a 100000","change c a 100000","change c d 50000","change b e 50000","erase d 50000","erase e 49999"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 199999;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "moon";
	string t1[] = {"erase o 5","add u 7","change d p 3","change m s 12","change n d 6","change s l 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
