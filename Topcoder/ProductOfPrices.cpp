#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <string.h>
using namespace std;

const int MOD=1e9+7;
const int MaxN=2e5+7;
int bit[MaxN];
class ProductOfPrices {
public:
        void update(int idx,int v){
            while(idx <= MaxN){
                bit[idx]+=v;
                idx+=(idx & -idx);
            }
        }
        int Query(int idx){
             int ret=0;
             while(idx >0){
               ret= (1ll*ret+1ll*bit[idx])%MOD;
               idx -= (idx & -idx);
             }
             return ret;
        }

	int product(int N, int L, int X0, int A, int B) {
             int ls=X0 % L;
             int ans=1;
             update(1,ls);
             for(int i=2;i<=N+1;i++){
                 int cur= (1ll*ls*A+1ll*B)%MOD;
                 int f= (1ll*(i-1)*cur-1ll*Query(i))%MOD;
                 ans= (1ll*ans*f)%MOD;
                 ls=cur;
                 update(i,f);
             }
             return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	ProductOfPrices *obj;
	int answer;
	obj = new ProductOfPrices();
	clock_t startTime = clock();
	answer = obj->product(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 10;
	p2 = 3;
	p3 = 1;
	p4 = 1;
	p5 = 180;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 20;
	p2 = 5;
	p3 = 2;
	p4 = 3;
	p5 = 64;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 21;
	p2 = 1;
	p3 = 7;
	p4 = 1;
	p5 = 3087;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 100;
	p2 = 4;
	p3 = 37;
	p4 = 11;
	p5 = 591860767;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	p1 = 200000;
	p2 = 999999999;
	p3 = 123456789;
	p4 = 987654321;
	p5 = 499739175;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
