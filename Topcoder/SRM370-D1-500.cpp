/*
*    Idea :  What is the minimum move u can but idk but we can try But 1 distance to Full distance length between each other 
*            For illustration every tranismetter can be put in from (j that is in range Between City A to City B But from j to j+(minimove);
*
*
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
const int N=200;
int dp[N][N];
int n,dis;
int arr[N];

class ConnectTheCities {
public:
       int solve(int t){
          for(int i=0;i<=n;i++){
             for(int j=0;j<=dis;j++){
                 dp[i][j]=(int)1e9;
             }
          }
          dp[0][0]=0;
          for(int i=0;i<=n;i++){
             for(int j=0;j<=dis;j++){
                if(dp[i][j]<(int)1e9){
                  for(int k=j;k<=(j+t);k++){
                    dp[i+1][k]=min(dp[i+1][k],dp[i][j]+abs(arr[i+1]-k));
                  }
                }
             }
          }
          int ret=(int)2e9;
          for(int i=0;i<=n;i++){
             for(int j=dis-t;j<=dis;j++){
              ret=min(ret,dp[i][j]);
             }
          }
          return ret;
       }


	int minimalRange(int distance, int funds, vector <int> position) {
		sort(position.begin(),position.end());
	        n=position.size();
	        dis=distance;
	        for(int i=0;i<n;i++){
	           arr[i+1]=position[i];
	        }
	        for(int i=1;i<=dis;i++){
	            if(solve(i)<=funds)return i;
	        }
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	ConnectTheCities *obj;
	int answer;
	obj = new ConnectTheCities();
	clock_t startTime = clock();
	answer = obj->minimalRange(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 5;
	int t2[] = {3,7,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 20;
	p1 = 100;
	int t2[] = {0,0,0,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 63;
	p1 = 19;
	int t2[] = {34,48,19,61,24};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
