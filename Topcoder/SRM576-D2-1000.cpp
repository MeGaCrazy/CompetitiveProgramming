/**
*  Idea: First Convert the Matrix From 2d to 1d to easly find the cyclic letter indeces and then for each length of string from [1..w]
*        Try to Verify if it Correct and not same position has different char and then cnt 26^(number of ? in the string ) 
*
*        Happy Solving :)
*
**/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int MOD = 1000000009;
class CharacterBoard2 {
public:
	int Pow(int x, int pw) {
		int ret = 1;
		while (pw>0) {
			if (pw & 1)ret = ((long long)ret*x) % MOD;
			pw >>= 1;
			x = ((long long)x*x) % MOD;
		}
		return ret;
	}

	int countGenerators(vector <string> v, int w, int xx, int yy) {
		int r = v.size(), c = v[0].size();
		int ret = 0;
		for (int k = 1; k <= w; k++) {
			bool ok = 1;
			map<int, char>mp;
			for (int i = 0; i<r; i++) {
				for (int j = 0; j<c; j++) {
					int cur = (((xx + i)*w) + (yy + j)) % k;
					if (mp.count(cur)) {
						ok = ok && (v[i][j] == mp[cur]);
					}
					else {
						mp[cur] = v[i][j];
					}
				}
			}
			if (ok) {
				int pw = k - mp.size();
				ret = ((long long)ret + Pow(26, pw)) % MOD;
			}
		}
		return ret%MOD;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	CharacterBoard2 *obj;
	int answer;
	obj = new CharacterBoard2();
	clock_t startTime = clock();
	answer = obj->countGenerators(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer) {
		cout << "Match :-)" << endl;
	}
	else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;

	{
		// ----- test 0 -----
		string t0[] = { "dea","abc" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 7;
		p2 = 1;
		p3 = 1;
		p4 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = { "xyxxy" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6;
		p2 = 1;
		p3 = 0;
		p4 = 28;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = { "gogogo","jijiji","rarara" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6;
		p2 = 0;
		p3 = 0;
		p4 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = { "abababacac","aaacacacbb","ccabababab" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 882;
		p2 = 10;
		p3 = 62;
		p4 = 361706985;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = { "asjkffqw","basjkffq","qbasjkff","qqbasjkf" };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 9031;
		p2 = 9024;
		p3 = 1959;
		p4 = 173947456;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
