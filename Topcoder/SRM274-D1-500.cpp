/**
*   Idea : At first What is the initial state or fact we will stand on that every dyck word Must Start with X and End With Y
*          so our initial state first letter X and last letter is Y so how we go further 
*          1- Need to do lexicographic  order between first letter and last letter 
*          Let's first know what's the conditions of word
*          1- word only have 1 dyck word that mean whole word only construct 1 dyck-word like xxyxxyyy 
*              u will see that number of x be equal y at the end only :) 
*          2- multiple of dyck words like xyxyxyxy contain 4 sub-dyck word :)          
*          Let's Go satsify the 2 Condition :
*                For Condition 1 : Only I Care is i will  take first X and Last Y and Try to reorder the sub-dyck-word between two letters
*                For Condition 2 : Just Sorted Them :) he don't care of how many times i swapped so sorting is just result of multiple swap :) 
*                                  To get  lexicographic order..
*
*         Happy Solving :)
**/                  

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;


class DyckwordUniformer {
public:
	string uniform(string s) {
	    if(!s.size())return "";
	    vector<string>ret(1);
	    int cnt=0;
	    for(int i=0;i<(int)s.size();i++){
	           if(s[i]=='X')cnt++;
	           else cnt--;
	           ret.back()+=s[i];
	           if(cnt<0)return "";
	           if(cnt==0)ret.push_back("");
	    }
	    if(cnt)return "";
	    if(ret.size()==2)ret[0]="X"+uniform(s.substr(1,s.size()-2))+"Y";
	    else{
	        for(int i=0;i<(int)ret.size();i++){
	           ret[i]=uniform(ret[i]);  	 			
	        }
	    }
	    sort(ret.begin(),ret.end());
	    string ans="";
	    for(int i=0;i<(int)ret.size();i++){
	     ans+=ret[i];
	    }
	    return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	DyckwordUniformer *obj;
	string answer;
	obj = new DyckwordUniformer();
	clock_t startTime = clock();
	answer = obj->uniform(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "XXYXXYYY";
	p1 = "XXXYYXYY";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "XYXYXXXYYYXXYY";
	p1 = "XXXYYYXXYYXYXY";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "XXXYYYXXYXXXYYYY";
	p1 = "XXXXYYYXYYXXXYYY";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "XXYYYX";
	p1 = "";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
