/*
*  Idea : Recurrence need memoize with vector and map and just simulate the process
*
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
map< vector<int>,int >mp;

class EllysCandyGame {
public:
       int solve(const vector<int>&v){
              if(mp.count(v)!=0){
                 return mp[v];
              }
              int n=0;
              for(int i=0;i<(int)v.size();i++){
                   if(v[i]==0)n++;
              }
              if(n==(int)v.size()){
                return mp[v]=0;
              }
              int ret=-1e9;
              for(int i=0;i<(int)v.size();i++){
                 if(v[i]!=0){
                   vector<int>tmp=v;
                   tmp[i]=0;
                   tmp[max(0,i-1)]*=2;
                   tmp[min(i+1,(int)v.size()-1)]*=2;
                   ret=max(ret,v[i]-solve(tmp));
                 }
              }
              return mp[v]=ret;
       }

	string getWinner(vector <int> sweets) {
	   mp.clear();
	   int ret=solve(sweets);
	   if(ret==0){
	    return "Draw";
	   }else if(ret>0){
	    return "Elly";
	   }else{
	    return "Kris";
	   }

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysCandyGame *obj;
	string answer;
	obj = new EllysCandyGame();
	clock_t startTime = clock();
	answer = obj->getWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {20,50,70,0,30};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Kris";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {42,13,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Elly";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {10,20};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Draw";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {3,1,7,11,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Kris";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {41,449,328,474,150,501,467,329,536,440};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Kris";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {177,131,142,171,411,391,17,222,100,298};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Elly";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
