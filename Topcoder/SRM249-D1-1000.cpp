/*
 Getting ConvexHull and calculate it's area :) 
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
const double EPS=1e-5;
struct point{
  double x,y;
  point(double x=0,double y=0):x(x),y(y){}
  point operator  -(point  &other){
      return point(x-other.x,y-other.y);
  }
  inline bool operator <(point other){
       if(fabs(x-other.x) <EPS)
                return y < other.y -EPS;
        return x < other.x -EPS;
  }

};
bool cmp(point a,point b){
     if(fabs(a.x-b.x) <EPS)
            return a.y < b.y -EPS;
             
      return a.x < b.x -EPS;
} 
class CultureGrowth {
public:


       double cross(point v1,point v2){
            return v1.x*v2.y-v1.y*v2.x;
       }

        vector<point>modify(vector<point>arr){
            int  n=(int)arr.size();
             sort(arr.begin(),arr.end(),cmp);
             vector<point>ans(105,point());
             int st=0,sz=0;
             for(int i=0;i<n;i++){
                while(sz-st >=2 && cross(ans[sz-1]-ans[sz-2],arr[i]-ans[sz-2])<=0)sz--;
                ans[sz++]=arr[i];
             }
              st=--sz;
              for(int i=n-1;i>=0;i--){
                 while(sz-st >=2 && cross(ans[sz-1]-ans[sz-2],arr[i]-ans[sz-2])<=0)sz--;
                 ans[sz++]=arr[i];
              }
             vector<point>ret(ans.begin(),ans.begin()+sz);
             return ret;
        }

	double finalTray(vector <int> xs, vector <int> ys) {
	   int n=(int)xs.size();
	   vector<point>arr;
	   for(int i=0;i<n;i++){
	      arr.push_back(point((double)xs[i],(double)ys[i]));
	   }	
	   vector<point>ret=modify(arr);
	   double area=0;
	   for(int i=0;i<ret.size()-1;i++){
	     area+=cross(ret[i],ret[i+1]);
	   }
	   area/=2.0;
	   return area;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CultureGrowth *obj;
	double answer;
	obj = new CultureGrowth();
	clock_t startTime = clock();
	answer = obj->finalTray(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	double p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,3,6,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,3,6,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {240};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {10,15,3,37};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {49,49,12,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 745.5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
