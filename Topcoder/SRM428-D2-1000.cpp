/*
*     Idea : First of all There 2 part to solve this problem ..
*            First we need compute how many n positions to put in n+m positions like combinations of C(n+m,n) yea it's the 
*            Combinations to Put a's in different position or in same time put z's in different position ,
*            The key of this idea the First Charchater of The string if we have string n =2 m=2 Then the combinations is
*             aazz -> azaz -> azza | zaaz -> zaza -> zzaa  we divide in two groups start with a's and z's 
*             now to know if he in The first Group Ignore the First One coz it fixed then calculate C(m+n-1,n-1) if C >= k then it's in first interval  
*             else he is in second group
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=205,inf=(int)1e9+1;
int dp[N][N];

class TheDictionary {
public:
	string find(int n, int m, int k) {
	     dp[0][0]=1;
	     for(int i=1;i<=N-5;i++){
	        dp[i][i]=1;
	        dp[i][0]=1;
	        for(int j=1;j<i;j++){
	           dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
	           if(dp[i][j]>inf){
	             dp[i][j]=inf;
	           }
	        }
	     }
	     if(dp[n+m][n]<k)return "";
	     string s="";
	     int len=n+m;
	     for(int i=1;i<=len;i++){
	        if(dp[n-1+m][n-1]>=k){
	          s+="a";
	          n--;
	        }else{
	          s+="z";
	          k-=dp[n-1+m][n-1];
	          m--;
	        }
	     }
	     return s;
	

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheDictionary *obj;
	string answer;
	obj = new TheDictionary();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = "azaz";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 6;
	p3 = "zzaa";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 10;
	p2 = 1000000000;
	p3 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 4;
	p2 = 47;
	p3 = "aaazazaazaz";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
