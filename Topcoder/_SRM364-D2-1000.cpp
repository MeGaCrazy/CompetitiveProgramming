/*
*  idea : Just if this station has power try to go to another planet that no have power and minimize
*
*
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=16;
int adj[N][N];
int dp[(1<<16)];
int n,num;
class PowerPlants {
public:
           int modify(string s){
               int mask=0;
               for(int i=0;i<s.size();i++){
                   if(s[i]=='Y')mask|=(1<<i);
               }
               return mask;
           }
           int cnt(int mask){
                int ret=0;
               for(int i=0;i<=16;i++){
                   if(mask&(1<<i))ret++;
               }
               return ret;
           }
           int solve(int mask){
             int &ret=dp[mask];
             if(ret!=-1)return ret;
             int have=cnt(mask);
             if(have>=num){
               return ret=0;
             }
             //if(i==n)return ret=0;
             ret=1e9;
             for(int i=0;i<n;i++){
                if((mask&(1<<i))==0)continue;
                for(int j=0;j<n;j++){
                  if((mask&(1<<j))==0){
                     ret=min(ret,adj[i][j]+solve(mask|(1<<j))) ;
                  }
                }
             }
             return ret;

           }
  	   int minCost(vector <string> s, string state, int numPlants) {
            n=s.size();
            num=numPlants;
            for(int i=0;i<n;i++){
              for(int j=0;j<n;j++){
                 adj[i][j]=(s[i][j]>='0'&&s[i][j]<='9')?(s[i][j]-'0'):((s[i][j]-'A')+10);
              }
            }
            memset(dp,-1,sizeof(dp));
            int mask=modify(state);
            
            return solve(mask);
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"" << "," << p2;
	cout << "]" << endl;
	PowerPlants *obj;
	int answer;
	obj = new PowerPlants();
	clock_t startTime = clock();
	answer = obj->minCost(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"024","203","430"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YNN";
	p2 = 3;
	p3 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0AB","A0C","CD0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YNN";
	p2 = 3;
	p3 = 21;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"1ABCD","35HF8","FDM31","AME93","01390"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NYNNN";
	p2 = 5;
	p3 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"012","123","234"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NNY";
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"1309328","DS2389U","92EJFAN","928FJNS","FJS0DJF","9FWJW0E","23JFNFS"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YYNYYNY";
	p2 = 4;
	p3 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"01","20"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YN";
	p2 = 2;
	p3 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
