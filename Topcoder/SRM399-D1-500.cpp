/*
*     Idea :  First The state of dp is [NumberOFMaxDigit][NumberOfOnesInA][NumberOfOnesInB][NumberOfOnesInC][Carry]
*             Then we made all possible choice from 0 0 0  to 1 1 1  in other word(The 8 possible choices)..
*             That Good now we go for critical section is the carry :) 
*             1- if u choice bit 1 for a and bit 1 for b if c is bit 1 we must have a carry to mange this section let's move for more illustration
*                1 +                                                                          
*                1     not valid if we need this position to get 1 in c but if we have carry  1
*               ----                                                                          1+   now we have valid the 1 bit requried in choice :)
*                10                                                                           1
*                                                                                             ___
*                                                                                             1 1
*            So from this Obervation not valid choice Only if ( Bit in a + Big in b + big in c + carry ) is even :)
*            so recurse untill u reach the base case then multiplay the return *2 + k like binary to decmial :)
*               
*/              

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=55,inf=(int)1e9;
int dp[N][N][N][N][2];

class BinarySum {
public:
       int Maxdigit(int x){
           int ret=0;
          while(x){
            ret++;
            x=x>>1;
          }
          return ret;
       }
       int getOne(int x){
         int ret=0;
         while(x){
           if(x&1)ret++;
           x=x>>1;
         }
         return ret;
       }
        int solve(int digit,int a,int b,int c,int carry){
            if(a<0||b<0||c<0)return inf;
            int &ret= dp[digit][a][b][c][carry];
            if(ret!=-1){
              return ret;
            }
            if(!digit){
              if(!a&&!b&&!c&&!carry)return ret=0;
              else return ret=inf;
            }
            ret=inf;
            for(int i=0;i<2;i++){
               for(int j=0;j<2;j++){
                  for(int k=0;k<2;k++){
                    if((carry+i+j+k)%2==0){
                      int cal=solve(digit-1,a-i,b-j,c-k,(i+j+carry)/2);
                      if(cal!=inf){
                        ret=min(ret,cal*2+k);
                      }
                    }
                  }
               }
            }
            return ret;
        }
	int rearrange(int a, int b, int c) {
   	  int digit=max(Maxdigit(a),max(Maxdigit(b),Maxdigit(c)));
	  int aa=getOne(a);
	  int bb=getOne(b);
	  int cc=getOne(c);
	  memset(dp,-1,sizeof(dp));
	  int ans=solve(digit,aa,bb,cc,0);
	   return ans >= inf ? -1 :ans; 
       }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BinarySum *obj;
	int answer;
	obj = new BinarySum();
	clock_t startTime = clock();
	answer = obj->rearrange(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 7;
	p1 = 6;
	p2 = 9;
	p3 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 1;
	p2 = 4;
	p3 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 3;
	p2 = 9;
	p3 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 32517565;
	p1 = 204650420;
	p2 = 4096;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
