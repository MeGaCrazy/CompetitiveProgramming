/*
*   target : cal the probability that can get goalsum within the rounds
*     sol  : 3 dimension [rounds,sum,bets]
*            Just make iteration with 3 loops if success in bet n times then he get (1<<n) value + current sum
*            and for fail he will lose (1<<n) so here .
*            Just if new value he get is bigger or equal goalSum then sum it's value
*            else then he can go the next round with this current proablility  before any bet i mean in bet 0
*            Sure fail equal (1-prob)  
*
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;
const int N=1005;
double dp[55][N][55];

class TestBettingStrategy {
public:
	double winProbability(int initSum, int goalSum, int rounds, int prob) {
	       memset(dp,0,sizeof(dp));
	       dp[0][initSum][0]=1.0;
	       double win=0;
	       for(int i=0;i<rounds;i++){
	          for(int j=0;j<=1000;j++){
	             for(int k=0;k<=i;k++){
	                if(j<(1ll<<k))continue;
	                int sucess=j+(1<<k),fail=j-(1<<k);
	                if(sucess>=goalSum)win+=(dp[i][j][k]*prob)/100.0;
	                else dp[i+1][sucess][0]+=dp[i][j][k]*prob/100.0;
	                dp[i+1][fail][k+1]+=dp[i][j][k]*(100-prob)/100.0;
	             }
	          }
	       }
	       return win;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TestBettingStrategy *obj;
	double answer;
	obj = new TestBettingStrategy();
	clock_t startTime = clock();
	answer = obj->winProbability(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 11;
	p2 = 4;
	p3 = 50;
	p4 = 0.875;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 20;
	p2 = 20;
	p3 = 50;
	p4 = 0.3441343307495117;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 20;
	p2 = 10;
	p3 = 90;
	p4 = 0.34867844010000015;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 24;
	p1 = 38;
	p2 = 24;
	p3 = 60;
	p4 = 0.5940784635646947;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
