#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
vector<string>v;
int K;
int dp[(1<<15)][16];
const int MOD=1000003;

class SetOfPatterns {
public:
       int Count(int mask){
          int ret=0;
          for(int i=0;i<15;i++){
             if((mask&(1<<i)))ret++;
          }
          return ret;
       }
       bool valid(int i,int j){
           for(int k=0;k<(int)v[i].size();k++){
              if(v[i][k]==v[j][k]||v[i][k]=='?'||v[j][k]=='?')continue;
              return 0;
           }
           return 1;
       }

       int solve(int mask,int cur){
           int &ret=dp[mask][cur];
           if(ret!=-1)return ret;
           ret=0;
           if(Count(mask)==K){
              ret=0;
              int cnt=0;
              for(int i=0;i<(int)v[0].size();i++){
                 bool ok=1;
                 for(int j=0;j<(int)v.size();j++){
                    if((mask&(1<<j))&&v[j][i]!='?'){ok=0;break;}
                 }
                 if(ok)cnt++;
              }
              int a=1;
              for(int i=0;i<cnt;i++){
                 a=(a*26)%MOD;
              }
              ret=((long long )ret+a)%MOD;
              return ret;
           }
           for(int i=cur;i<(int)v.size();i++){
                 bool ok=true;
                 if(Count(mask)==0){
                   ret=((long long )ret+(long long )solve(mask|(1<<i),i+1))%MOD;
                 }
                 else if((mask&(1<<i))==0){
                     for(int j=0;j<(int)v.size();j++){
                        if((mask&(1<<j))){
                          if(!valid(i,j)){ok=false;break;}
                        }
                     }
                    if(ok)ret=((long long )ret+(long long )solve(mask|(1<<i),i+1))%MOD;
                  }
           }
           return ret=ret%MOD;
        }
	int howMany(vector <string> patterns, int k) {
	   v=patterns;
	   K=k;
	   memset(dp,-1,sizeof(dp));
	   return solve(0,0);
	  	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	SetOfPatterns *obj;
	int answer;
	obj = new SetOfPatterns();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"?"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 26;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"a","b","c"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"a?","?b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"?" "?" "?" "?" "?"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 881343;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
