/*
*   Idea : Just make mask and the current value and then make all perumation 
*          Doing the Mod Trick if 133%7==0 then it's equal [100%7 + 30%7 + 3 %7]%7=0 :)
*          Just mulitply each step by 10 and mod by m every time :)
*          Corner Case make same position i mean if u have 2 digits = 3  u must put them in same position that ..
*
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=32770;
long long dp[N][55];
string s;
int n,m;
class DivisiblePermutations {
public:
        long long solve(int mask,int value){
            long long  &ret=dp[mask][value];
            if(ret!=-1)return ret;
            if(mask==((1<<n)-1)){
               int t=value%m;
               return ret=(t==0);
            }
            ret=0;
            char same=' ';
            for(int i=0;i<n;i++){
               if((mask&(1<<i))==0&&same!=s[i]){
                  same=s[i];
                  ret+=solve(mask|(1<<i),(value*10+(s[i]-'0'))%m);
              }
            }
            return ret;
        }

	long long count(string t, int M) {
	   s=t;
	   n=s.size();
	   m=M;
	   sort(s.begin(),s.end());
	   memset(dp,-1,sizeof(dp));
	   return solve(0,0); 		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	DivisiblePermutations *obj;
	long long answer;
	obj = new DivisiblePermutations();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = "133";
	p1 = 7;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "2753";
	p1 = 5;
	p2 = 6ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "1112225";
	p1 = 5;
	p2 = 20ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "123456789";
	p1 = 17;
	p2 = 21271ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "987654321999999";
	p1 = 39;
	p2 = 19960896ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
