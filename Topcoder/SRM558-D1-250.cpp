
/*
  as in tutorial.

*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <string.h>
using namespace std;


class Stamp {
public:
	int getMinimumCost(string s, int stampCost, int pushCost) {
	          int n=s.length();
	          int ss[55]={};
	          string values="0RG0B00*";
	          int ans=2e9;
	          for(int i=0;i<n;i++){
	              ss[i]=values.find(s[i]);
	          }

 	          int cost[55]={};

	          for(int l=1;l<=n;l++){
	              cost[0]=0;
	              for(int i=1;i<=n;i++)cost[i]=2e9;
	            
	              for(int i=0;i<n;i++){
	                  int color=7;
	                  for(int j=i;j<n;j++){
	                       color&=ss[j];
	                       if(!color)break;
	                       int range=j-i+1;
	                       if(range < l)continue;
	                       if(cost[i]==2e9)continue;
	                       cost[j+1]=min(cost[j+1],cost[i]+((range+l-1)/l)*pushCost);
	                  }
	              }
	              if(cost[n]!=2e9){
		       ans=min(ans,cost[n]+l*stampCost);
		    }
	        }

	        return ans;
	     }
	          	          	
	
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	Stamp *obj;
	int answer;
	obj = new Stamp();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "RRGGBB";
	p1 = 1;
	p2 = 1;
	p3 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "R**GB*";
	p1 = 1;
	p2 = 1;
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BRRB";
	p1 = 2;
	p2 = 7;
	p3 = 30;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "R*RR*GG";
	p1 = 10;
	p2 = 58;
	p3 = 204;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "*B**B**B*BB*G*BBB**B**B*";
	p1 = 5;
	p2 = 2;
	p3 = 33;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "*R*RG*G*GR*RGG*G*GGR***RR*GG";
	p1 = 7;
	p2 = 1;
	p3 = 30;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
