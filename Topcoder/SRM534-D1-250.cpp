#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
const int N=20;
int dp[1<<N];
int n;

class EllysCheckers {
public:
      int solve(int mask){
           if(dp[mask]!=-1){
               return dp[mask];
               }
           if(mask&(1<<(n-1))){
             return solve(mask^(1<<(n-1)));
           }
           for(int i=0;i+1<n;i++){
              if((mask&(1<<i)) && (mask&(1<<(i+1)))==0){
                if(solve(mask^(1<<i)^(1<<(i+1)))==2){
                   return dp[mask]=1;
                 }
              }
           }
           for(int i=0;i+3<n;i++){
              if((mask&(1<<i))&&(mask&(1<<(i+1)))&&(mask&(1<<(i+2)))&&(mask&(1<<(i+3)))==0){
                 if(solve(mask^(1<<i)^(1<<(i+3)))==2){
                     return dp[mask]=1;
                 }
              }
           }
        return dp[mask]=2;
      }
	string getWinner(string board) {
              n=board.size();
             memset(dp,-1,sizeof(dp));
             int mask=0;
             if(board[n-1]=='o')board[n-1]='.';
             for(int i=0;i<n;i++){
                 if(board[i]=='o'){
                   mask|=(1<<i);
                 }
             }
             return solve(mask)==1?"YES":"NO";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	EllysCheckers *obj;
	string answer;
	obj = new EllysCheckers();
	clock_t startTime = clock();
	answer = obj->getWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = ".o...";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "..o..o";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".o...ooo..oo..";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "......o.ooo.o......";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = ".o..o...o....o.....o";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
