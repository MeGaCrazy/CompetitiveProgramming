/*
*    Idea : count the number of a's and b's and c's another parameter last-1 last coz to keep track if now it's the Third element  that it's not valid
*           and if last-1 == last then now we must choice another letter else we can choice The Best of there if he already in this place so it's not move
*           then this element +1 that is not move and so on
*
*
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>

using namespace std;
const int N=55;
int dp[N][N][N][5][5];
string s;
int n;
int A,B,C;

class BoxesArrangement {
public:
       int solve(int a,int b,int c,int last2,int last){
           int &ret=dp[a][b][c][last2][last];
           if(ret!=-1)return ret;
           if(a>A||b>B||c>C)return -200000;
           ret=-2000000;
           int i=a+b+c;
           if(i==n)return ret=0;
           if(last2==last){
              if(last!=0) ret=max(ret,solve(a+1,b,c,last,0)+(s[i]=='A'));
              if(last!=1)ret=max(ret,solve(a,b+1,c,last,1)+(s[i]=='B'));
              if(last!=2)ret=max(ret,solve(a,b,c+1,last,2)+(s[i]=='C'));
           }else{
              ret=max(ret,solve(a+1,b,c,last,0)+(s[i]=='A'));
              ret=max(ret,solve(a,b+1,c,last,1)+(s[i]=='B'));
              ret=max(ret,solve(a,b,c+1,last,2)+(s[i]=='C'));           
           }
           return ret;
       }

	int maxUntouched(string boxes) {
	   memset(dp,-1,sizeof(dp)) ;
	   s=boxes;	
	   n=s.size();
	   A=0,B=0,C=0;
	   for(int i=0;i<n;i++){
	     A+=(s[i]=='A');
	     B+=(s[i]=='B');
	     C+=(s[i]=='C');
	   }
	   int ans=solve(0,0,0,3,4);
	   return ans >=0? ans :-1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BoxesArrangement *obj;
	int answer;
	obj = new BoxesArrangement();
	clock_t startTime = clock();
	answer = obj->maxUntouched(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "AAABBBCCC";
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AAAAAAAACBB";
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "CCCCCB";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "BAACAABAACAAA";
	p1 = 5;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "CBBABA";
	p1 = 6;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
