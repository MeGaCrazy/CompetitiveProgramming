#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>
using namespace std;
const int N=22;
bool visit[N];
int dp[1<<N];
int cost[N];
int r,c;
vector<string>v;
class OrderOfOperationsDiv2 {
public:
       pair<int,int> Get(int mask1,int mask2){
            int ret=0;
            int rmask=0;
           for(int i=0;i<=20;i++){
              if((mask1&(1<<i))&&(mask2&(1<<i))){
                 ret++;
                 rmask|=(1<<i);

              }
           }
           return make_pair(ret,rmask);
       }

       int solve(int mask){
           if(!mask){
             return 0;
           }
           int &ret=dp[mask];
           if(~ret){
              return ret;
           }
           ret=1e9;
           for(int i=0;i<v.size();i++){
               if( (mask&(1<<cost[i])==0))continue;
               pair<int,int> k=Get(mask,cost[i]);
               ret=min(ret,solve(mask^k.second)+(k.first*k.first));
           }
           return ret;
       }

	int minTime(vector <string> s) {
	  memset(dp,-1,sizeof(dp));
	  memset(cost,0,sizeof(cost));
	  v=s;
	  int mask=0;
	  int r=s.size();
	  int c=s[0].size();
	  for(int i=0;i<r;i++){
	     for(int j=0;j<c;j++){
	        if(s[i][j]=='1'){
	          mask|=(1<<j);
	          cost[i]|=(1<<j);
	        }
	     }
	  }
	  return solve(mask);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	OrderOfOperationsDiv2 *obj;
	int answer;
	obj = new OrderOfOperationsDiv2();
	clock_t startTime = clock();
	answer = obj->minTime(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"111","001","010"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"11101","00111","10101","00000","11000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"11111111111111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 400;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1000","1100","1110"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"111","111","110","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
