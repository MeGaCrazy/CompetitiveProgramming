/**
*    Idea : Just Make Simple Take or not every time and get max ,,
*           I'm Just reversing the recusion start from bottom if the remaining 1 R and 1.....B 
*           Obviously I musn't start from R =0 if I can't win anymore why I contiune :) ? 
*           The Top-Down Function For illustration :) 
*   Corner Case : 5000*5000  state in double wil not fit in 64 bit so Just all you need is previous state [1-cur][1....B]
*
*
*   Happy Solving :)
**/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <string>
using namespace std;
const int N=5001;
double dp[2][N];
class RedIsGood {
public:                           
       /*
       double solve(int i,int j){
       	   if(i==0){
       	     return 0;
       	   }
           if(i==0&&j==0){
             return 0;
           }
           double ret=dp[i][j];
           if(ret!=-1.0){
            return ret;
          }
//          cerr<<"hoi"<<endl;
          ret=0.0;
          double ch1,ch2;
          ch1=ch2=0.0;
          double pr = (double)(i)/(i+j);
          double pb = (double)(j)/(i+j);
          if(i>0) ch1= (solve(i-1,j)+1.0)*(pr);
          if(j>0) ch2=(solve(i,j-1)-1.0)*(pb);
          ret=max(ret,ch1+ch2);                                                                           		
          return dp[i][j]=ret;
       }
       */
	double getProfit(int R, int B) {
		int n=R,m=B;
		memset(dp,0,sizeof(dp));
		int cur=1;
		for(int i=1;i<=n;i++){
		   for(int j=0;j<=m;j++){
                      double pr = (double)(i)/(i+j);
                      double pb = (double)(j)/(i+j);
		      double tmp=(dp[1-cur][j]+1.0)*pr;
		      double tmp2=0.0;  
		      if(j>0)tmp2=(dp[cur][j-1]-1.0)*pb;
		      dp[cur][j]=max(0.0,tmp+tmp2);
		   }
		   cur=1-cur;
		}
		return dp[1-cur][m];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	RedIsGood *obj;
	double answer;
	obj = new RedIsGood();
	clock_t startTime = clock();
	answer = obj->getProfit(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = 0;
	p1 = 7;
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 0;
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 1;
	p2 = 4.166666666666667;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 2;
	p2 = 0.6666666666666666;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 12;
	p1 = 4;
	p2 = 8.324175824175823;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 11;
	p1 = 12;
	p2 = 1.075642825339958;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
