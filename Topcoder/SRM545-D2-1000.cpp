/***
*  Idea : For Every Line contain n point there's n choose k  c[n][k] possible launch of Rocket 
*         now for every position in X (0<=L) try count point in all possible slope ... But u must see that y >0 not horiziontal and 
*         and x may be negative ...                                                                                                           
*  Corner Case : 2,3 and 4,6 has same slope mean the same points will counted twice or maybe more...
*                So avoid that taken the slope of coprime numbers :) 
*
* 
***/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int N=305,MOD=(int)1e9+7;
int c[N][N];
class SpacetskE {
public:
        int gcd(int a,int b){
            if(b==0)return a;
            return gcd(b,a%b);
        }

	int countsets(int L, int H, int K) {
	    if(K==1){
	      return (L+1)*(H+1);
	    }
	    for(int i=0;i<=N;i++){
	        c[i][0]=1;
	        for(int j=1;j<=i;j++){
	          c[i][j]=((long long)c[i-1][j]+c[i-1][j-1])%MOD;
	        }
	    }
	    int ans=0;
	    for(int i=0;i<=L;i++){
	        for(int dx=-L;dx<=L;dx++){
	           for(int dy=1;dy<=H;dy++){
	               if(gcd(abs(dx),dy)==1){
	                  int x=i;
	                  int y=0;
	                  int cnt=0;
	                  while(0<=x&&x<=L&&y<=H){
	                    cnt++;
	                    x+=dx;
	                    y+=dy;
	                  }
	                  ans=(1ll*ans+c[cnt][K])%MOD;
	               }
	           }
	        }
	    }
	    return ans;
	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	SpacetskE *obj;
	int answer;
	obj = new SpacetskE();
	clock_t startTime = clock();
	answer = obj->countsets(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 23;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	p1 = 5;
	p2 = 3;
	p3 = 202;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 70;
	p1 = 52;
	p2 = 18;
	p3 = 296314116;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
